=begin
#Sajari API

#Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.

The version of the OpenAPI document: v4
Contact: support@sajari.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for SajariAPIClient::PromotionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PromotionsApi' do
  before do
    # run before each test
    @api_instance = SajariAPIClient::PromotionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PromotionsApi' do
    it 'should create an instance of PromotionsApi' do
      expect(@api_instance).to be_instance_of(SajariAPIClient::PromotionsApi)
    end
  end

  # unit tests for create_promotion
  # Create promotion
  # Create a new promotion in a collection.
  # @param collection_id The collection to create a promotion in, e.g. &#x60;my-collection&#x60;.
  # @param promotion The promotion to create.
  # @param [Hash] opts the optional parameters
  # @return [Promotion]
  describe 'create_promotion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_promotion
  # Delete promotion
  # Delete a promotion and all of its associated data.  &gt; Note: This operation cannot be reversed.
  # @param collection_id The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;.
  # @param promotion_id The promotion to delete, e.g. &#x60;1234&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'delete_promotion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_promotion
  # Get promotion
  # Retrieve the details of a promotion.
  # @param collection_id The collection that owns the promotion, e.g. &#x60;my-collection&#x60;.
  # @param promotion_id The promotion to retrieve, e.g. &#x60;1234&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [Promotion]
  describe 'get_promotion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_promotions
  # List promotions
  # Retrieve a list of promotions in a collection.  Promotion pins, exclusions and filter boosts are not returned in this call.
  # @param collection_id The collection that owns this set of promotions, e.g. &#x60;my-collection&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The maximum number of promotions to return. The service may return fewer than this value.  If unspecified, at most 50 promotions are returned.  The maximum value is 1000; values above 1000 are coerced to 1000.
  # @option opts [String] :page_token A page token, received from a previous [ListPromotions](/api#operation/ListPromotions) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPromotions](/api#operation/ListPromotions) must match the call that provided the page token.
  # @return [ListPromotionsResponse]
  describe 'list_promotions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_promotion
  # Update promotion
  # Update the details of a promotion.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;display_name&#x60; and &#x60;start_time&#x60; fields, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/promotions/{promotion_id}?update_mask&#x3D;display_name,start_time &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;display_name\&quot;: \&quot;new value\&quot;,   \&quot;start_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot;,   \&quot;end_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;end_time&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
  # @param collection_id The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;.
  # @param promotion_id The promotion to update, e.g. &#x60;1234&#x60;.
  # @param update_mask The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;display_name&#x60;, &#x60;filter_boosts&#x60;.  For each field that you want to update, provide a corresponding value in the promotion object containing the new value.
  # @param promotion Details of the promotion to update.
  # @param [Hash] opts the optional parameters
  # @return [Promotion]
  describe 'update_promotion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
