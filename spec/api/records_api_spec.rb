=begin
#Sajari API

#Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.

The version of the OpenAPI document: v4
Contact: support@sajari.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for SajariAPIClient::RecordsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RecordsApi' do
  before do
    # run before each test
    @api_instance = SajariAPIClient::RecordsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RecordsApi' do
    it 'should create an instance of RecordsApi' do
      expect(@api_instance).to be_instance_of(SajariAPIClient::RecordsApi)
    end
  end

  # unit tests for batch_upsert_records
  # Batch upsert records
  # The batch version of the [UpsertRecord](/api#operation/UpsertRecord) call.
  # @param collection_id The collection to upsert the records in, e.g. &#x60;my-collection&#x60;.
  # @param batch_upsert_records_request 
  # @param [Hash] opts the optional parameters
  # @return [BatchUpsertRecordsResponse]
  describe 'batch_upsert_records test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_record
  # Delete record
  # Delete a record with the given key.
  # @param collection_id The collection that contains the record to delete, e.g. &#x60;my-collection&#x60;.
  # @param delete_record_request 
  # @param [Hash] opts the optional parameters
  # @return [AnyType]
  describe 'delete_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_record
  # Get record
  # Retrieve a record with the given key.
  # @param collection_id The collection that contains the record to retrieve, e.g. &#x60;my-collection&#x60;.
  # @param get_record_request 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upsert_record
  # Upsert record
  # If the record does not exist in your collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
  # @param collection_id The collection to upsert the record in, e.g. &#x60;my-collection&#x60;.
  # @param upsert_record_request 
  # @param [Hash] opts the optional parameters
  # @return [UpsertRecordResponse]
  describe 'upsert_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
