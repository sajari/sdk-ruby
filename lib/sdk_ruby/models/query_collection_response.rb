=begin
#Search.io API

#Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.

The version of the OpenAPI document: v4
Contact: support@search.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module SajariAPIClient
  class QueryCollectionResponse
    # A list of the promotions activated when running the query.
    attr_accessor :active_promotions

    # The aggregates run with filters.
    attr_accessor :aggregate_filters

    # The aggregates returned by the query.
    attr_accessor :aggregates

    # Banners associated with this query.
    attr_accessor :banners

    # The weight applied to the features in the query, used for analyzing the index, neural and feature components for results.  For each result:  ``` score = max(index_score, neural_score) * (1 - feature_score_weight) +         feature_score * feature_score_weight ```
    attr_accessor :feature_score_weight

    attr_accessor :pipeline

    # The total time taken to perform the query.
    attr_accessor :processing_duration

    # The query identifier.  This uniqely identifies the specific query it was returned on. This is used to link user interactions with a query.
    attr_accessor :query_id

    # A mapping of redirects triggered for all possible variations of the query.
    attr_accessor :redirects

    # The results returned by the query.
    attr_accessor :results

    # The total number of results that match the query.
    attr_accessor :total_size

    # The modified variables returned by the pipeline after it has finished processing.
    attr_accessor :variables

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active_promotions' => :'active_promotions',
        :'aggregate_filters' => :'aggregate_filters',
        :'aggregates' => :'aggregates',
        :'banners' => :'banners',
        :'feature_score_weight' => :'feature_score_weight',
        :'pipeline' => :'pipeline',
        :'processing_duration' => :'processing_duration',
        :'query_id' => :'query_id',
        :'redirects' => :'redirects',
        :'results' => :'results',
        :'total_size' => :'total_size',
        :'variables' => :'variables'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'active_promotions' => :'Array<ActivePromotion>',
        :'aggregate_filters' => :'Hash<String, QueryAggregateResult>',
        :'aggregates' => :'Hash<String, QueryAggregateResult>',
        :'banners' => :'Array<Banner>',
        :'feature_score_weight' => :'Float',
        :'pipeline' => :'QueryCollectionResponsePipeline',
        :'processing_duration' => :'String',
        :'query_id' => :'String',
        :'redirects' => :'Hash<String, RedirectResult>',
        :'results' => :'Array<QueryResult>',
        :'total_size' => :'String',
        :'variables' => :'Hash<String, Object>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SajariAPIClient::QueryCollectionResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SajariAPIClient::QueryCollectionResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active_promotions')
        if (value = attributes[:'active_promotions']).is_a?(Array)
          self.active_promotions = value
        end
      end

      if attributes.key?(:'aggregate_filters')
        if (value = attributes[:'aggregate_filters']).is_a?(Hash)
          self.aggregate_filters = value
        end
      end

      if attributes.key?(:'aggregates')
        if (value = attributes[:'aggregates']).is_a?(Hash)
          self.aggregates = value
        end
      end

      if attributes.key?(:'banners')
        if (value = attributes[:'banners']).is_a?(Array)
          self.banners = value
        end
      end

      if attributes.key?(:'feature_score_weight')
        self.feature_score_weight = attributes[:'feature_score_weight']
      end

      if attributes.key?(:'pipeline')
        self.pipeline = attributes[:'pipeline']
      end

      if attributes.key?(:'processing_duration')
        self.processing_duration = attributes[:'processing_duration']
      end

      if attributes.key?(:'query_id')
        self.query_id = attributes[:'query_id']
      end

      if attributes.key?(:'redirects')
        if (value = attributes[:'redirects']).is_a?(Hash)
          self.redirects = value
        end
      end

      if attributes.key?(:'results')
        if (value = attributes[:'results']).is_a?(Array)
          self.results = value
        end
      end

      if attributes.key?(:'total_size')
        self.total_size = attributes[:'total_size']
      end

      if attributes.key?(:'variables')
        if (value = attributes[:'variables']).is_a?(Hash)
          self.variables = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active_promotions == o.active_promotions &&
          aggregate_filters == o.aggregate_filters &&
          aggregates == o.aggregates &&
          banners == o.banners &&
          feature_score_weight == o.feature_score_weight &&
          pipeline == o.pipeline &&
          processing_duration == o.processing_duration &&
          query_id == o.query_id &&
          redirects == o.redirects &&
          results == o.results &&
          total_size == o.total_size &&
          variables == o.variables
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active_promotions, aggregate_filters, aggregates, banners, feature_score_weight, pipeline, processing_duration, query_id, redirects, results, total_size, variables].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SajariAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
