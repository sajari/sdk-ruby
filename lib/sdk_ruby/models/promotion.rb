=begin
#Sajari API

#Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.

The version of the OpenAPI document: v4
Contact: support@sajari.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'date'
require 'time'

module SajariAPIClient
  # Promotion contains a trigger, determining which searches it should be active for, and a list of alterations that should be made to search results when it is active.
  class Promotion
    # Output only. The ID of the collection that owns this promotion.
    attr_accessor :collection_id

    # Condition expression applied to a search request that determines which searches the promotion is active for.  For example, to apply the promotion's pins and boosts whenever a user searches for 'shoes' set condition to `q = 'shoes'`.
    attr_accessor :condition

    # Output only. Time the promotion was created.
    attr_accessor :create_time

    # If disabled, the promotion will never be triggered.
    attr_accessor :disabled

    # The promotion's display name.
    attr_accessor :display_name

    # If specified, the promotion is considered disabled after this time.
    attr_accessor :end_time

    # Records to exclude from search results, if the promotion is enabled.
    attr_accessor :exclusions

    # Filter boosts to apply to searches, if the promotion is enabled.
    attr_accessor :filter_boosts

    # Conditions applied to the filters passed from the user. A query must match at least one of these in order to trigger the promotion.
    attr_accessor :filter_conditions

    # Output only. The promotion's ID.
    attr_accessor :id

    # Fixes items to specific positions in the search results.
    attr_accessor :pins

    # Range boosts to apply to searches, if the promotion is enabled.
    attr_accessor :range_boosts

    # If specified, the promotion is considered disabled before this time.
    attr_accessor :start_time

    # Output only. Time the promotion was last updated.
    attr_accessor :update_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'collection_id' => :'collection_id',
        :'condition' => :'condition',
        :'create_time' => :'create_time',
        :'disabled' => :'disabled',
        :'display_name' => :'display_name',
        :'end_time' => :'end_time',
        :'exclusions' => :'exclusions',
        :'filter_boosts' => :'filter_boosts',
        :'filter_conditions' => :'filter_conditions',
        :'id' => :'id',
        :'pins' => :'pins',
        :'range_boosts' => :'range_boosts',
        :'start_time' => :'start_time',
        :'update_time' => :'update_time'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'collection_id' => :'String',
        :'condition' => :'String',
        :'create_time' => :'Time',
        :'disabled' => :'Boolean',
        :'display_name' => :'String',
        :'end_time' => :'Time',
        :'exclusions' => :'Array<PromotionExclusion>',
        :'filter_boosts' => :'Array<PromotionFilterBoost>',
        :'filter_conditions' => :'Array<PromotionFilterCondition>',
        :'id' => :'String',
        :'pins' => :'Array<PromotionPin>',
        :'range_boosts' => :'Array<PromotionRangeBoost>',
        :'start_time' => :'Time',
        :'update_time' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SajariAPIClient::Promotion` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SajariAPIClient::Promotion`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'collection_id')
        self.collection_id = attributes[:'collection_id']
      end

      if attributes.key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'exclusions')
        if (value = attributes[:'exclusions']).is_a?(Array)
          self.exclusions = value
        end
      end

      if attributes.key?(:'filter_boosts')
        if (value = attributes[:'filter_boosts']).is_a?(Array)
          self.filter_boosts = value
        end
      end

      if attributes.key?(:'filter_conditions')
        if (value = attributes[:'filter_conditions']).is_a?(Array)
          self.filter_conditions = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'pins')
        if (value = attributes[:'pins']).is_a?(Array)
          self.pins = value
        end
      end

      if attributes.key?(:'range_boosts')
        if (value = attributes[:'range_boosts']).is_a?(Array)
          self.range_boosts = value
        end
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @condition.nil?
        invalid_properties.push('invalid value for "condition", condition cannot be nil.')
      end

      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @condition.nil?
      return false if @display_name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          collection_id == o.collection_id &&
          condition == o.condition &&
          create_time == o.create_time &&
          disabled == o.disabled &&
          display_name == o.display_name &&
          end_time == o.end_time &&
          exclusions == o.exclusions &&
          filter_boosts == o.filter_boosts &&
          filter_conditions == o.filter_conditions &&
          id == o.id &&
          pins == o.pins &&
          range_boosts == o.range_boosts &&
          start_time == o.start_time &&
          update_time == o.update_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [collection_id, condition, create_time, disabled, display_name, end_time, exclusions, filter_boosts, filter_conditions, id, pins, range_boosts, start_time, update_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SajariAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
