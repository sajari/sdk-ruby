=begin
#Search.io API

#Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.

The version of the OpenAPI document: v4
Contact: support@search.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module SajariAPIClient
  class PipelinesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create pipeline
    # Create a new pipeline.  Pipelines are immutable once created. If you want to change a pipeline e.g. to add or change some steps, you need to create a new version of that pipeline.  To start using a new pipeline you need to update your record ingestion calls and/or your query calls to specify the new pipeline.  To create the pipeline from YAML, set the request's `Content-Type` header to `application/yaml` and submit the pipeline's YAML in the request body.
    # @param collection_id [String] The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;.
    # @param pipeline [Pipeline] The pipeline to create.
    # @param [Hash] opts the optional parameters
    # @return [Pipeline]
    def create_pipeline(collection_id, pipeline, opts = {})
      data, _status_code, _headers = create_pipeline_with_http_info(collection_id, pipeline, opts)
      data
    end

    # Create pipeline
    # Create a new pipeline.  Pipelines are immutable once created. If you want to change a pipeline e.g. to add or change some steps, you need to create a new version of that pipeline.  To start using a new pipeline you need to update your record ingestion calls and/or your query calls to specify the new pipeline.  To create the pipeline from YAML, set the request&#39;s &#x60;Content-Type&#x60; header to &#x60;application/yaml&#x60; and submit the pipeline&#39;s YAML in the request body.
    # @param collection_id [String] The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;.
    # @param pipeline [Pipeline] The pipeline to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def create_pipeline_with_http_info(collection_id, pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.create_pipeline ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PipelinesApi.create_pipeline"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling PipelinesApi.create_pipeline"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/pipelines'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/yaml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pipeline)

      # return_type
      return_type = opts[:debug_return_type] || 'Pipeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PipelinesApi.create_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#create_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate pipelines
    # Generate basic record, query and autocomplete pipeline templates. Use these templates as a starting point for your collection's pipelines.  This call returns a set of pipelines that you can pass directly to the create pipeline call.  The generated templates can be returned in JSON, the default, or YAML. To return the generated pipelines in YAML, set the request's `Accept` header to `application/yaml`. The three pipelines in the YAML response are separated by three dashes (`---`).
    # @param collection_id [String] The collection, e.g. &#x60;my-collection&#x60;.
    # @param generate_pipelines_request [GeneratePipelinesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GeneratePipelinesResponse]
    def generate_pipelines(collection_id, generate_pipelines_request, opts = {})
      data, _status_code, _headers = generate_pipelines_with_http_info(collection_id, generate_pipelines_request, opts)
      data
    end

    # Generate pipelines
    # Generate basic record, query and autocomplete pipeline templates. Use these templates as a starting point for your collection&#39;s pipelines.  This call returns a set of pipelines that you can pass directly to the create pipeline call.  The generated templates can be returned in JSON, the default, or YAML. To return the generated pipelines in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;. The three pipelines in the YAML response are separated by three dashes (&#x60;---&#x60;).
    # @param collection_id [String] The collection, e.g. &#x60;my-collection&#x60;.
    # @param generate_pipelines_request [GeneratePipelinesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneratePipelinesResponse, Integer, Hash)>] GeneratePipelinesResponse data, response status code and response headers
    def generate_pipelines_with_http_info(collection_id, generate_pipelines_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.generate_pipelines ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PipelinesApi.generate_pipelines"
      end
      # verify the required parameter 'generate_pipelines_request' is set
      if @api_client.config.client_side_validation && generate_pipelines_request.nil?
        fail ArgumentError, "Missing the required parameter 'generate_pipelines_request' when calling PipelinesApi.generate_pipelines"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}:generatePipelines'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_pipelines_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneratePipelinesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PipelinesApi.generate_pipelines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#generate_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default pipeline
    # Get the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.
    # @param collection_id [String] The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;.
    # @param type [String] The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline.
    # @param [Hash] opts the optional parameters
    # @return [GetDefaultPipelineResponse]
    def get_default_pipeline(collection_id, type, opts = {})
      data, _status_code, _headers = get_default_pipeline_with_http_info(collection_id, type, opts)
      data
    end

    # Get default pipeline
    # Get the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.
    # @param collection_id [String] The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;.
    # @param type [String] The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDefaultPipelineResponse, Integer, Hash)>] GetDefaultPipelineResponse data, response status code and response headers
    def get_default_pipeline_with_http_info(collection_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_default_pipeline ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PipelinesApi.get_default_pipeline"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling PipelinesApi.get_default_pipeline"
      end
      # verify enum value
      allowable_values = ["TYPE_UNSPECIFIED", "RECORD", "QUERY"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}:getDefaultPipeline'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDefaultPipelineResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_default_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_default_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default pipeline version
    # Get the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.  To retrieve the pipeline in YAML, set the request's `Accept` header to `application/yaml`.
    # @param collection_id [String] The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;.
    # @param type [String] The type of the pipeline to get the default version of.
    # @param name [String] The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (default to 'VIEW_UNSPECIFIED')
    # @return [Pipeline]
    def get_default_version(collection_id, type, name, opts = {})
      data, _status_code, _headers = get_default_version_with_http_info(collection_id, type, name, opts)
      data
    end

    # Get default pipeline version
    # Get the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.  To retrieve the pipeline in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;.
    # @param collection_id [String] The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;.
    # @param type [String] The type of the pipeline to get the default version of.
    # @param name [String] The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration.
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def get_default_version_with_http_info(collection_id, type, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_default_version ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PipelinesApi.get_default_version"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling PipelinesApi.get_default_version"
      end
      # verify enum value
      allowable_values = ["TYPE_UNSPECIFIED", "RECORD", "QUERY"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PipelinesApi.get_default_version"
      end
      allowable_values = ["VIEW_UNSPECIFIED", "BASIC", "FULL"]
      if @api_client.config.client_side_validation && opts[:'view'] && !allowable_values.include?(opts[:'view'])
        fail ArgumentError, "invalid value for \"view\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/pipelines/{type}/{name}:getDefaultVersion'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s)).sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'view'] = opts[:'view'] if !opts[:'view'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Pipeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_default_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_default_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pipeline
    # Retrieve the details of a pipeline. Supply the type, name and version.  To retrieve the pipeline in YAML, set the request's `Accept` header to `application/yaml`.
    # @param collection_id [String] The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;.
    # @param type [String] The type of the pipeline to retrieve.
    # @param name [String] The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;.
    # @param version [String] The version of the pipeline to retrieve, e.g. &#x60;42&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (default to 'VIEW_UNSPECIFIED')
    # @return [Pipeline]
    def get_pipeline(collection_id, type, name, version, opts = {})
      data, _status_code, _headers = get_pipeline_with_http_info(collection_id, type, name, version, opts)
      data
    end

    # Get pipeline
    # Retrieve the details of a pipeline. Supply the type, name and version.  To retrieve the pipeline in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;.
    # @param collection_id [String] The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;.
    # @param type [String] The type of the pipeline to retrieve.
    # @param name [String] The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;.
    # @param version [String] The version of the pipeline to retrieve, e.g. &#x60;42&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration.
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def get_pipeline_with_http_info(collection_id, type, name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PipelinesApi.get_pipeline"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling PipelinesApi.get_pipeline"
      end
      # verify enum value
      allowable_values = ["TYPE_UNSPECIFIED", "RECORD", "QUERY"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PipelinesApi.get_pipeline"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling PipelinesApi.get_pipeline"
      end
      allowable_values = ["VIEW_UNSPECIFIED", "BASIC", "FULL"]
      if @api_client.config.client_side_validation && opts[:'view'] && !allowable_values.include?(opts[:'view'])
        fail ArgumentError, "invalid value for \"view\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/pipelines/{type}/{name}/{version}'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s)).sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'view'] = opts[:'view'] if !opts[:'view'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Pipeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pipelines
    # Retrieve a list of pipelines in a collection.
    # @param collection_id [String] The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000.
    # @option opts [String] :page_token A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token.
    # @option opts [String] :view The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (default to 'VIEW_UNSPECIFIED')
    # @return [ListPipelinesResponse]
    def list_pipelines(collection_id, opts = {})
      data, _status_code, _headers = list_pipelines_with_http_info(collection_id, opts)
      data
    end

    # List pipelines
    # Retrieve a list of pipelines in a collection.
    # @param collection_id [String] The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000.
    # @option opts [String] :page_token A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token.
    # @option opts [String] :view The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration.
    # @return [Array<(ListPipelinesResponse, Integer, Hash)>] ListPipelinesResponse data, response status code and response headers
    def list_pipelines_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.list_pipelines ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PipelinesApi.list_pipelines"
      end
      allowable_values = ["VIEW_UNSPECIFIED", "BASIC", "FULL"]
      if @api_client.config.client_side_validation && opts[:'view'] && !allowable_values.include?(opts[:'view'])
        fail ArgumentError, "invalid value for \"view\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/pipelines'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'view'] = opts[:'view'] if !opts[:'view'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListPipelinesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PipelinesApi.list_pipelines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#list_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set default pipeline
    # Set the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.  Once a default pipeline has been set it cannot be cleared, only set to another pipeline.
    # @param collection_id [String] The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;.
    # @param set_default_pipeline_request [SetDefaultPipelineRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def set_default_pipeline(collection_id, set_default_pipeline_request, opts = {})
      data, _status_code, _headers = set_default_pipeline_with_http_info(collection_id, set_default_pipeline_request, opts)
      data
    end

    # Set default pipeline
    # Set the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.  Once a default pipeline has been set it cannot be cleared, only set to another pipeline.
    # @param collection_id [String] The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;.
    # @param set_default_pipeline_request [SetDefaultPipelineRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def set_default_pipeline_with_http_info(collection_id, set_default_pipeline_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.set_default_pipeline ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PipelinesApi.set_default_pipeline"
      end
      # verify the required parameter 'set_default_pipeline_request' is set
      if @api_client.config.client_side_validation && set_default_pipeline_request.nil?
        fail ArgumentError, "Missing the required parameter 'set_default_pipeline_request' when calling PipelinesApi.set_default_pipeline"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}:setDefaultPipeline'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(set_default_pipeline_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PipelinesApi.set_default_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#set_default_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set default pipeline version
    # Set the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.
    # @param collection_id [String] The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;.
    # @param type [String] The type of the pipeline to set the default version of.
    # @param name [String] The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;.
    # @param set_default_version_request [SetDefaultVersionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def set_default_version(collection_id, type, name, set_default_version_request, opts = {})
      data, _status_code, _headers = set_default_version_with_http_info(collection_id, type, name, set_default_version_request, opts)
      data
    end

    # Set default pipeline version
    # Set the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.
    # @param collection_id [String] The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;.
    # @param type [String] The type of the pipeline to set the default version of.
    # @param name [String] The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;.
    # @param set_default_version_request [SetDefaultVersionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def set_default_version_with_http_info(collection_id, type, name, set_default_version_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.set_default_version ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PipelinesApi.set_default_version"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling PipelinesApi.set_default_version"
      end
      # verify enum value
      allowable_values = ["TYPE_UNSPECIFIED", "RECORD", "QUERY"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PipelinesApi.set_default_version"
      end
      # verify the required parameter 'set_default_version_request' is set
      if @api_client.config.client_side_validation && set_default_version_request.nil?
        fail ArgumentError, "Missing the required parameter 'set_default_version_request' when calling PipelinesApi.set_default_version"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/pipelines/{type}/{name}:setDefaultVersion'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s)).sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(set_default_version_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PipelinesApi.set_default_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#set_default_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
