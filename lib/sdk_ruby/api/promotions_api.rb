=begin
#Search.io API

#Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.

The version of the OpenAPI document: v4
Contact: support@search.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module SajariAPIClient
  class PromotionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create promotion
    # Create a new promotion in a collection.
    # @param collection_id [String] The collection to create a promotion in, e.g. &#x60;my-collection&#x60;.
    # @param promotion [Promotion] The promotion to create.
    # @param [Hash] opts the optional parameters
    # @return [Promotion]
    def create_promotion(collection_id, promotion, opts = {})
      data, _status_code, _headers = create_promotion_with_http_info(collection_id, promotion, opts)
      data
    end

    # Create promotion
    # Create a new promotion in a collection.
    # @param collection_id [String] The collection to create a promotion in, e.g. &#x60;my-collection&#x60;.
    # @param promotion [Promotion] The promotion to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Promotion, Integer, Hash)>] Promotion data, response status code and response headers
    def create_promotion_with_http_info(collection_id, promotion, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PromotionsApi.create_promotion ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PromotionsApi.create_promotion"
      end
      # verify the required parameter 'promotion' is set
      if @api_client.config.client_side_validation && promotion.nil?
        fail ArgumentError, "Missing the required parameter 'promotion' when calling PromotionsApi.create_promotion"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/promotions'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(promotion)

      # return_type
      return_type = opts[:debug_return_type] || 'Promotion'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PromotionsApi.create_promotion",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromotionsApi#create_promotion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete promotion
    # Delete a promotion and all of its associated data.  > Note: This operation cannot be reversed.
    # @param collection_id [String] The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;.
    # @param promotion_id [String] The promotion to delete, e.g. &#x60;1234&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_promotion(collection_id, promotion_id, opts = {})
      data, _status_code, _headers = delete_promotion_with_http_info(collection_id, promotion_id, opts)
      data
    end

    # Delete promotion
    # Delete a promotion and all of its associated data.  &gt; Note: This operation cannot be reversed.
    # @param collection_id [String] The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;.
    # @param promotion_id [String] The promotion to delete, e.g. &#x60;1234&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_promotion_with_http_info(collection_id, promotion_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PromotionsApi.delete_promotion ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PromotionsApi.delete_promotion"
      end
      # verify the required parameter 'promotion_id' is set
      if @api_client.config.client_side_validation && promotion_id.nil?
        fail ArgumentError, "Missing the required parameter 'promotion_id' when calling PromotionsApi.delete_promotion"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/promotions/{promotion_id}'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s)).sub('{' + 'promotion_id' + '}', CGI.escape(promotion_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PromotionsApi.delete_promotion",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromotionsApi#delete_promotion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get promotion
    # Retrieve the details of a promotion.
    # @param collection_id [String] The collection that owns the promotion, e.g. &#x60;my-collection&#x60;.
    # @param promotion_id [String] The promotion to retrieve, e.g. &#x60;1234&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Promotion]
    def get_promotion(collection_id, promotion_id, opts = {})
      data, _status_code, _headers = get_promotion_with_http_info(collection_id, promotion_id, opts)
      data
    end

    # Get promotion
    # Retrieve the details of a promotion.
    # @param collection_id [String] The collection that owns the promotion, e.g. &#x60;my-collection&#x60;.
    # @param promotion_id [String] The promotion to retrieve, e.g. &#x60;1234&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Promotion, Integer, Hash)>] Promotion data, response status code and response headers
    def get_promotion_with_http_info(collection_id, promotion_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PromotionsApi.get_promotion ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PromotionsApi.get_promotion"
      end
      # verify the required parameter 'promotion_id' is set
      if @api_client.config.client_side_validation && promotion_id.nil?
        fail ArgumentError, "Missing the required parameter 'promotion_id' when calling PromotionsApi.get_promotion"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/promotions/{promotion_id}'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s)).sub('{' + 'promotion_id' + '}', CGI.escape(promotion_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Promotion'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PromotionsApi.get_promotion",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromotionsApi#get_promotion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List promotions
    # Retrieve a list of promotions in a collection.  Promotion pins, exclusions and filter boosts are not returned in this call.
    # @param collection_id [String] The collection that owns this set of promotions, e.g. &#x60;my-collection&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The maximum number of promotions to return. The service may return fewer than this value.  If unspecified, at most 50 promotions are returned.  The maximum value is 1000; values above 1000 are coerced to 1000.
    # @option opts [String] :page_token A page token, received from a previous [ListPromotions](/api#operation/ListPromotions) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPromotions](/api#operation/ListPromotions) must match the call that provided the page token.
    # @return [ListPromotionsResponse]
    def list_promotions(collection_id, opts = {})
      data, _status_code, _headers = list_promotions_with_http_info(collection_id, opts)
      data
    end

    # List promotions
    # Retrieve a list of promotions in a collection.  Promotion pins, exclusions and filter boosts are not returned in this call.
    # @param collection_id [String] The collection that owns this set of promotions, e.g. &#x60;my-collection&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The maximum number of promotions to return. The service may return fewer than this value.  If unspecified, at most 50 promotions are returned.  The maximum value is 1000; values above 1000 are coerced to 1000.
    # @option opts [String] :page_token A page token, received from a previous [ListPromotions](/api#operation/ListPromotions) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPromotions](/api#operation/ListPromotions) must match the call that provided the page token.
    # @return [Array<(ListPromotionsResponse, Integer, Hash)>] ListPromotionsResponse data, response status code and response headers
    def list_promotions_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PromotionsApi.list_promotions ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PromotionsApi.list_promotions"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/promotions'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListPromotionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PromotionsApi.list_promotions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromotionsApi#list_promotions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update promotion
    # Update the details of a promotion.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the `update_mask` in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the `display_name` and `start_time` fields, make a `PATCH` request to the URL:  ``` /v4/collections/{collection_id}/promotions/{promotion_id}?update_mask=display_name,start_time ```  With the JSON body:  ``` {   \"display_name\": \"new value\",   \"start_time\": \"2006-01-02T15:04:05Z07:00\",   \"end_time\": \"2006-01-02T15:04:05Z07:00\" } ```  > Note: In this example `end_time` is not updated because it is not specified in the `update_mask`.
    # @param collection_id [String] The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;.
    # @param promotion_id [String] The promotion to update, e.g. &#x60;1234&#x60;.
    # @param update_mask [String] The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;display_name&#x60;, &#x60;filter_boosts&#x60;.  For each field that you want to update, provide a corresponding value in the promotion object containing the new value.
    # @param promotion [Promotion] Details of the promotion to update.
    # @param [Hash] opts the optional parameters
    # @return [Promotion]
    def update_promotion(collection_id, promotion_id, update_mask, promotion, opts = {})
      data, _status_code, _headers = update_promotion_with_http_info(collection_id, promotion_id, update_mask, promotion, opts)
      data
    end

    # Update promotion
    # Update the details of a promotion.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;display_name&#x60; and &#x60;start_time&#x60; fields, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/promotions/{promotion_id}?update_mask&#x3D;display_name,start_time &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;display_name\&quot;: \&quot;new value\&quot;,   \&quot;start_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot;,   \&quot;end_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;end_time&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
    # @param collection_id [String] The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;.
    # @param promotion_id [String] The promotion to update, e.g. &#x60;1234&#x60;.
    # @param update_mask [String] The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;display_name&#x60;, &#x60;filter_boosts&#x60;.  For each field that you want to update, provide a corresponding value in the promotion object containing the new value.
    # @param promotion [Promotion] Details of the promotion to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Promotion, Integer, Hash)>] Promotion data, response status code and response headers
    def update_promotion_with_http_info(collection_id, promotion_id, update_mask, promotion, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PromotionsApi.update_promotion ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling PromotionsApi.update_promotion"
      end
      # verify the required parameter 'promotion_id' is set
      if @api_client.config.client_side_validation && promotion_id.nil?
        fail ArgumentError, "Missing the required parameter 'promotion_id' when calling PromotionsApi.update_promotion"
      end
      # verify the required parameter 'update_mask' is set
      if @api_client.config.client_side_validation && update_mask.nil?
        fail ArgumentError, "Missing the required parameter 'update_mask' when calling PromotionsApi.update_promotion"
      end
      # verify the required parameter 'promotion' is set
      if @api_client.config.client_side_validation && promotion.nil?
        fail ArgumentError, "Missing the required parameter 'promotion' when calling PromotionsApi.update_promotion"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/promotions/{promotion_id}'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s)).sub('{' + 'promotion_id' + '}', CGI.escape(promotion_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'update_mask'] = update_mask

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(promotion)

      # return_type
      return_type = opts[:debug_return_type] || 'Promotion'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"PromotionsApi.update_promotion",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromotionsApi#update_promotion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
