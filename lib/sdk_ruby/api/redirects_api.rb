=begin
#Sajari API

#Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.

The version of the OpenAPI document: v4
Contact: support@sajari.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module SajariAPIClient
  class RedirectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create redirect
    # Create a new redirect in a collection.
    # @param collection_id [String] The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.
    # @param redirect [Redirect] The redirect to create.
    # @param [Hash] opts the optional parameters
    # @return [Redirect]
    def create_redirect(collection_id, redirect, opts = {})
      data, _status_code, _headers = create_redirect_with_http_info(collection_id, redirect, opts)
      data
    end

    # Create redirect
    # Create a new redirect in a collection.
    # @param collection_id [String] The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.
    # @param redirect [Redirect] The redirect to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Redirect, Integer, Hash)>] Redirect data, response status code and response headers
    def create_redirect_with_http_info(collection_id, redirect, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedirectsApi.create_redirect ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling RedirectsApi.create_redirect"
      end
      # verify the required parameter 'redirect' is set
      if @api_client.config.client_side_validation && redirect.nil?
        fail ArgumentError, "Missing the required parameter 'redirect' when calling RedirectsApi.create_redirect"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/redirects'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(redirect)

      # return_type
      return_type = opts[:debug_return_type] || 'Redirect'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"RedirectsApi.create_redirect",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedirectsApi#create_redirect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete redirect
    # Delete a redirect and all of its associated data.  > Note: This operation cannot be reversed.
    # @param collection_id [String] The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.
    # @param redirect_id [String] The redirect to delete, e.g. &#x60;1234&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_redirect(collection_id, redirect_id, opts = {})
      data, _status_code, _headers = delete_redirect_with_http_info(collection_id, redirect_id, opts)
      data
    end

    # Delete redirect
    # Delete a redirect and all of its associated data.  &gt; Note: This operation cannot be reversed.
    # @param collection_id [String] The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.
    # @param redirect_id [String] The redirect to delete, e.g. &#x60;1234&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_redirect_with_http_info(collection_id, redirect_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedirectsApi.delete_redirect ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling RedirectsApi.delete_redirect"
      end
      # verify the required parameter 'redirect_id' is set
      if @api_client.config.client_side_validation && redirect_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirect_id' when calling RedirectsApi.delete_redirect"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/redirects/{redirect_id}'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s)).sub('{' + 'redirect_id' + '}', CGI.escape(redirect_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"RedirectsApi.delete_redirect",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedirectsApi#delete_redirect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get redirect
    # Retrieve the details of a redirect.
    # @param collection_id [String] The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.
    # @param redirect_id [String] The redirect to retrieve, e.g. &#x60;1234&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Redirect]
    def get_redirect(collection_id, redirect_id, opts = {})
      data, _status_code, _headers = get_redirect_with_http_info(collection_id, redirect_id, opts)
      data
    end

    # Get redirect
    # Retrieve the details of a redirect.
    # @param collection_id [String] The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.
    # @param redirect_id [String] The redirect to retrieve, e.g. &#x60;1234&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Redirect, Integer, Hash)>] Redirect data, response status code and response headers
    def get_redirect_with_http_info(collection_id, redirect_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedirectsApi.get_redirect ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling RedirectsApi.get_redirect"
      end
      # verify the required parameter 'redirect_id' is set
      if @api_client.config.client_side_validation && redirect_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirect_id' when calling RedirectsApi.get_redirect"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/redirects/{redirect_id}'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s)).sub('{' + 'redirect_id' + '}', CGI.escape(redirect_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Redirect'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"RedirectsApi.get_redirect",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedirectsApi#get_redirect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List redirects
    # Retrieve a list of redirects in a collection.
    # @param collection_id [String] The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000.
    # @option opts [String] :page_token A page token, received from a previous [ListRedirects](/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/api#operation/ListRedirects) must match the call that provided the page token.
    # @return [ListRedirectsResponse]
    def list_redirects(collection_id, opts = {})
      data, _status_code, _headers = list_redirects_with_http_info(collection_id, opts)
      data
    end

    # List redirects
    # Retrieve a list of redirects in a collection.
    # @param collection_id [String] The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000.
    # @option opts [String] :page_token A page token, received from a previous [ListRedirects](/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/api#operation/ListRedirects) must match the call that provided the page token.
    # @return [Array<(ListRedirectsResponse, Integer, Hash)>] ListRedirectsResponse data, response status code and response headers
    def list_redirects_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedirectsApi.list_redirects ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling RedirectsApi.list_redirects"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/redirects'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListRedirectsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"RedirectsApi.list_redirects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedirectsApi#list_redirects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update redirect
    # Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the `update_mask` in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the `condition` field, make a `PATCH` request to the URL:  ``` /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask=condition ```  With the JSON body:  ``` {   \"condition\": \"new value\",   \"target\": \"...\" } ```  > Note: In this example `target` is not updated because it is not specified in the `update_mask`.
    # @param collection_id [String] The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.
    # @param redirect_id [String] The redirect to update, e.g. &#x60;1234&#x60;.
    # @param update_mask [String] The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.
    # @param redirect [Redirect] Details of the redirect to update.
    # @param [Hash] opts the optional parameters
    # @return [Redirect]
    def update_redirect(collection_id, redirect_id, update_mask, redirect, opts = {})
      data, _status_code, _headers = update_redirect_with_http_info(collection_id, redirect_id, update_mask, redirect, opts)
      data
    end

    # Update redirect
    # Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;condition&#x60; field, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask&#x3D;condition &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;condition\&quot;: \&quot;new value\&quot;,   \&quot;target\&quot;: \&quot;...\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;target&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
    # @param collection_id [String] The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.
    # @param redirect_id [String] The redirect to update, e.g. &#x60;1234&#x60;.
    # @param update_mask [String] The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.
    # @param redirect [Redirect] Details of the redirect to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Redirect, Integer, Hash)>] Redirect data, response status code and response headers
    def update_redirect_with_http_info(collection_id, redirect_id, update_mask, redirect, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedirectsApi.update_redirect ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        fail ArgumentError, "Missing the required parameter 'collection_id' when calling RedirectsApi.update_redirect"
      end
      # verify the required parameter 'redirect_id' is set
      if @api_client.config.client_side_validation && redirect_id.nil?
        fail ArgumentError, "Missing the required parameter 'redirect_id' when calling RedirectsApi.update_redirect"
      end
      # verify the required parameter 'update_mask' is set
      if @api_client.config.client_side_validation && update_mask.nil?
        fail ArgumentError, "Missing the required parameter 'update_mask' when calling RedirectsApi.update_redirect"
      end
      # verify the required parameter 'redirect' is set
      if @api_client.config.client_side_validation && redirect.nil?
        fail ArgumentError, "Missing the required parameter 'redirect' when calling RedirectsApi.update_redirect"
      end
      # resource path
      local_var_path = '/v4/collections/{collection_id}/redirects/{redirect_id}'.sub('{' + 'collection_id' + '}', CGI.escape(collection_id.to_s)).sub('{' + 'redirect_id' + '}', CGI.escape(redirect_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'update_mask'] = update_mask

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(redirect)

      # return_type
      return_type = opts[:debug_return_type] || 'Redirect'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"RedirectsApi.update_redirect",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedirectsApi#update_redirect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
